name: Deploy Backend to Production

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'prod'
      force_deploy:
        description: 'Force deployment even if image tag exists'
        type: boolean
        default: false

env:
  KUBE_NAMESPACE: prod
  DEPLOYMENT_NAME: crew-flow-server

jobs:
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.crew-flow.com

    steps:
      - name: Checkout infrastructure repository
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Install Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Update image tag
        if: ${{ github.event.inputs.image_tag != 'prod' }}
        run: |
          cd kubernetes/backend/overlays/production
          kustomize edit set image rg.fr-par.scw.cloud/crew-flow/crew-flow-server:${{ github.event.inputs.image_tag }}

      - name: Apply Kustomize manifests
        run: |
          # Build and show what will be applied
          kustomize build kubernetes/backend/overlays/production

          # Apply the manifests
          kustomize build kubernetes/backend/overlays/production | kubectl apply -f -

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.KUBE_NAMESPACE }} --timeout=5m

      - name: Verify deployment
        run: |
          echo "=== Pods ==="
          kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=crew-flow-server

          echo ""
          echo "=== Services ==="
          kubectl get svc -n ${{ env.KUBE_NAMESPACE }} -l app=crew-flow-server

          echo ""
          echo "=== Ingress ==="
          kubectl get ingress -n ${{ env.KUBE_NAMESPACE }}

      - name: Check application health
        run: |
          # Get the service ClusterIP
          SERVICE_IP=$(kubectl get svc crew-flow-server -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.spec.clusterIP}')

          # Run health check from within the cluster
          kubectl run health-check --rm -i --restart=Never --image=curlimages/curl:latest -n ${{ env.KUBE_NAMESPACE }} -- \
            curl -f http://$SERVICE_IP:8080/actuator/health || exit 1

          echo "âœ… Application is healthy!"

      - name: Deployment summary
        if: success()
        run: |
          echo "ðŸŽ‰ Deployment successful!"
          echo ""
          echo "Image: rg.fr-par.scw.cloud/crew-flow/crew-flow-server:${{ github.event.inputs.image_tag }}"
          echo "Namespace: ${{ env.KUBE_NAMESPACE }}"
          echo "Deployment: ${{ env.DEPLOYMENT_NAME }}"
          echo ""
          echo "Verify at: https://api.crew-flow.com/actuator/health"
